const API_URL = "http://localhost:8080/todo/";

// ตรวจสอบว่า user ได้เข้าสู่ระบบแล้วหรือยัง
const token = localStorage.getItem("token");

if (!token) {
  // ถ้าไม่มี token ให้เปลี่ยนเส้นทางไปที่หน้า login.html
  window.location.href = "login.html";
}

// ฟังก์ชันสำหรับการดึง todos จาก API
async function fetchTodos() {
  const token = localStorage.getItem("token");  // ดึง token จาก localStorage

  const response = await fetch(API_URL, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${token}`,  // ส่ง token ใน header
    },
  });

  const todos = await response.json();
  const todoList = document.getElementById("todos");
  todoList.innerHTML = "";
  todos.forEach(todo => {
    const todoItem = document.createElement("div");
    todoItem.className = "todo";
    todoItem.draggable = true; // ทำให้ todoItem สามารถลากได้
    todoItem.setAttribute("data-id", todo.id); // เก็บ id ของ todo ไว้ใน attribute

    todoItem.innerHTML = `
      <label>
        <input type="checkbox" ${todo.complete ? "checked" : ""} onchange="toggleComplete(${todo.id}, this.checked)">
        ${todo.text}
      </label>
      <button onclick="editTodo(${todo.id})">Edit</button>
      <button onclick="deleteTodo(${todo.id})">Delete</button>
    `;

    // เพิ่ม event listeners สำหรับ drag และ drop
    todoItem.addEventListener("dragstart", handleDragStart);
    todoItem.addEventListener("dragover", handleDragOver);
    todoItem.addEventListener("drop", handleDrop);
    todoList.appendChild(todoItem);
  });
}

// ฟังก์ชันสำหรับการเพิ่ม Todo ใหม่
async function addTodo() {
  const text = document.getElementById("newTodoText").value;
  if (!text) return alert("Please enter a todo text");

  const token = localStorage.getItem("token");  // ดึง token จาก localStorage

  await fetch(API_URL, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${token}`,  // ส่ง token ใน header
    },
    body: JSON.stringify({ text, complete: false }),
  });

  document.getElementById("newTodoText").value = "";
  fetchTodos();
}

// เพิ่ม event listener สำหรับการกดปุ่ม Enter
document.getElementById("newTodoText").addEventListener("keydown", function(event) {
  if (event.key === "Enter") {
    event.preventDefault();  // ป้องกันการเปลี่ยนบรรทัดใหม่
    addTodo();  // เรียกฟังก์ชัน addTodo เมื่อกด Enter
  }
});

// ฟังก์ชันสำหรับการอัพเดทสถานะ complete ของ Todo
async function toggleComplete(id, complete) {
  const token = localStorage.getItem("token");  // ดึง token จาก localStorage

  const response = await fetch(API_URL + id, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${token}`,  // ส่ง token ใน header
    },
  });

  const todo = await response.json();
  
  await fetch(API_URL + id, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${token}`,  // ส่ง token ใน header
    },
    body: JSON.stringify({
      text: todo.text,
      complete,
    }),
  });
  
  fetchTodos();
}

// ฟังก์ชันสำหรับการลบ Todo
async function deleteTodo(id) {
  const token = localStorage.getItem("token");  // ดึง token จาก localStorage

  await fetch(API_URL + id, {
    method: "DELETE",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${token}`,  // ส่ง token ใน header
    },
  });

  fetchTodos();
}

// ฟังก์ชันสำหรับการแก้ไข Todo
async function editTodo(id) {
  const token = localStorage.getItem("token");  // ดึง token จาก localStorage

  const response = await fetch(API_URL + id, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${token}`,  // ส่ง token ใน header
    },
  });

  const todo = await response.json();
  
  const newText = prompt("Edit Todo :", todo.text);
  if (newText !== null && newText.trim() !== "") {
    await fetch(API_URL + id, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`,  // ส่ง token ใน header
      },
      body: JSON.stringify({
        text: newText.trim(),
        complete: todo.complete,
      }),
    });
    fetchTodos();
  }
}

// ฟังก์ชันสำหรับการจัดการ drag and drop
function handleDragStart(event) {
  // เก็บ id ของ todo ที่ถูกลาก
  event.dataTransfer.setData("text/plain", event.target.getAttribute("data-id"));
}

function handleDragOver(event) {
  // ป้องกันไม่ให้เกิดข้อผิดพลาดในระหว่างการลาก
  event.preventDefault();
}

async function handleDrop(event) {
  event.preventDefault();
  
  // ดึง id ของ todo ที่ถูกลาก
  const draggedId = event.dataTransfer.getData("text/plain");
  const targetId = event.target.closest(".todo").getAttribute("data-id");

  if (draggedId !== targetId) {
    await swapTodos(draggedId, targetId); // เรียกฟังก์ชันเพื่อแลกเปลี่ยนตำแหน่ง
  }
}

async function swapTodos(id1, id2) {
  const token = localStorage.getItem("token");  // ดึง token จาก localStorage

  // รับข้อมูลของทั้งสอง Todo
  const todo1Response = await fetch(API_URL + id1, {
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${token}`,  // ส่ง token ใน header
    },
  });
  const todo1 = await todo1Response.json();

  const todo2Response = await fetch(API_URL + id2, {
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${token}`,  // ส่ง token ใน header
    },
  });
  const todo2 = await todo2Response.json();

  // แลกเปลี่ยนตำแหน่งของทั้งสอง Todo
  await fetch(API_URL + id1, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${token}`,  // ส่ง token ใน header
    },
    body: JSON.stringify({
      text: todo2.text,
      complete: todo2.complete,
    }),
  });

  await fetch(API_URL + id2, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${token}`,  // ส่ง token ใน header
    },
    body: JSON.stringify({
      text: todo1.text,
      complete: todo1.complete,
    }),
  });

  fetchTodos(); // โหลดรายการใหม่หลังจากการแลกเปลี่ยน
}

// ฟังก์ชันสำหรับการ logout
function logout() {
  localStorage.removeItem("token");  // ลบ token จาก localStorage
  window.location.href = "login.html";  // เปลี่ยนเส้นทางไปที่หน้า login
}

// เรียกฟังก์ชัน fetchTodos เมื่อโหลดหน้า
fetchTodos();
